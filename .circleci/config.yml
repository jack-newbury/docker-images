version: 2.1

jobs:
  # Build terraform image into Docker Hub.
  build-terraform:
    docker:
      - image: cimg/go:1.18.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          cd dockerImages/terraform
          mkdir reports
          TAG=latest
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/terraform:$TAG .
          docker scan --login --token $SNYK_AUTH_TOKEN --accept-license && docker scan -f Dockerfile $DOCKER_USER/terraform:$TAG --json > reports/terraform.json
          docker push $DOCKER_USER/terraform
      - store_test_results:
          path: dockerImages/terraform/reports
      - store_artifacts:
          path: dockerImages/terraform/reports

  # Build CircleCI Runner image into Docker Hub.
  build-circleciRunner:
    docker:
      - image: cimg/go:1.18.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          cd dockerImages/circleciRunner
          mkdir reports
          TAG=latest
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/circleci-runner:$TAG .
          docker scan --login --token $SNYK_AUTH_TOKEN --accept-license && cd reports && touch circleciRunner.json && docker scan -f ../Dockerfile $DOCKER_USER/circleci-runner:$TAG --json > circleciRunner.json
          docker push $DOCKER_USER/circleci-runner
      - store_test_results:
          path: dockerImages/circleciRunner/reports
      - store_artifacts:
          path: dockerImages/circleciRunner/reports

  # Build CircleCI Runner image into Docker Hub.
  build-alpineSlackNotifications:
    docker:
      - image: cimg/go:1.18.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          cd dockerImages/alpineSlackNotifications
          mkdir reports
          TAG=latest
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/alpine-slack-notifications:$TAG .
          docker scan --login --token $SNYK_AUTH_TOKEN --accept-license && cd reports && touch alpineSlackNotifications && docker scan -f ../Dockerfile $DOCKER_USER/alpine-slack-notifications:$TAG --json > alpineSlackNotifications.json
          docker push $DOCKER_USER/alpine-slack-notifications
      - store_test_results:
          path: dockerImages/alpineSlackNotifications/reports
      - store_artifacts:
          path: dockerImages/alpineSlackNotifications/reports

  # Build Graph As Code image into Docker Hub.
  build-graphAsCodeCi:
    docker:
      - image: cimg/go:1.18.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          cd dockerImages/graphAsCodeCi
          mkdir reports
          TAG=latest
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/graph-as-code-ci:$TAG .
          docker scan --login --token $SNYK_AUTH_TOKEN --accept-license && docker scan -f Dockerfile $DOCKER_USER/graph-as-code-ci:$TAG --json > reports/graphAsCodeCi.json
          docker push $DOCKER_USER/graph-as-code-ci
      - store_test_results:
          path: dockerImages/graphAsCodeCi/reports
      - store_artifacts:
          path: dockerImages/graphAsCodeCi/reports

workflows:
  build-and-deploy:
    jobs:
      # Deploy terraform image
      - build-terraform:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy CircleCI Runner image
      - build-circleciRunner:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Alpine Slack Notifications image
      - build-alpineSlackNotifications:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Graph As Code CI image
      - build-graphAsCodeCi:
          context: docker-images
          filters:
            branches:
              only: main
