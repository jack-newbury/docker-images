version: 2.1

commands:
  setup:
    steps:
      - checkout
      - run:
          name: install vault
          command: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update -y && sudo apt install vault -y
            sudo setcap cap_ipc_lock= /usr/bin/vault
      - run:
          name: Setup buildx and qemu
          command: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static software-properties-common gcc
            sudo apt-get install -y binfmt-support
      - run:
          name: Check versions
          command: |
            qemu-aarch64-static --version
            update-binfmts --version
      - run:
          name: Create builder
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install all
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker buildx create --name arm-builder
            docker buildx use arm-builder
            docker buildx inspect --bootstrap

get_secrets: &get_secrets
  name: Get secrets from HCP VAULT
  command: |
    vault login -no-print -method=userpass username=cicd password=$VAULT_PASS
    echo "export DOCKER_USER=$(vault kv get -format json secret/core-infra/docker-hub | jq -r '.data.data.username')" >> $BASH_ENV
    echo "export DOCKER_PASS=$(vault kv get -format json secret/core-infra/docker-hub | jq -r '.data.data.password')" >> $BASH_ENV

jobs:
  # Build terraform image into Docker Hub.
  build-terraform:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - setup
      - run:
          <<: *get_secrets
      - run:
          name: Build ARM docker
          command: |
            TAG=latest
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            cd dockerImages/terraform
            DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_USER/terraform:$TAG --push .

  # Build CircleCI Runner image into Docker Hub.
  build-circleciRunner:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - setup
      - run:
          <<: *get_secrets
      - run:
          name: Build ARM docker
          command: |
            TAG=latest
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            cd dockerImages/circleciRunner
            DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_USER/circleci-runner:$TAG --push .

  # Build CircleCI Runner image into Docker Hub.
  build-alpineSlackNotifications:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - setup
      - run:
          <<: *get_secrets
      - run:
          name: Build ARM docker
          command: |
            TAG=latest
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            cd dockerImages/alpineSlackNotifications
            DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_USER/alpine-slack-notifications:$TAG --push .

  # Build Graph As Code image into Docker Hub.
  build-graphAsCodeCi:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - setup
      - run:
          <<: *get_secrets
      - run:
          name: Build ARM docker
          command: |
            TAG=latest
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            cd dockerImages/graphAsCodeCi
            DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_USER/graph-as-code-ci:$TAG --push .

  # Build Vault CLI image into Docker Hub.
  build-vaultCli:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - setup
      - run:
          <<: *get_secrets
      - run:
          name: Build ARM docker
          command: |
            TAG=latest
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            cd dockerImages/vaultCli
            DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_USER/vault-cli:$TAG --push .

  # Build Go Docker builder image into Docker Hub.
  build-goDockerBuilder:
    docker:
      - image: jacknewbury/go-docker-builder:latest
    steps:
      - run:
          <<: *get_secrets
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          cd dockerImages/goDockerBuilder
          TAG=latest
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/go-docker-builder:$TAG .
          docker push $DOCKER_USER/go-docker-builder

workflows:
  build-and-deploy:
    jobs:
      # Deploy terraform image
      - build-terraform:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy CircleCI Runner image
      - build-circleciRunner:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Alpine Slack Notifications image
      - build-alpineSlackNotifications:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Graph As Code CI image
      - build-graphAsCodeCi:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Vault CLI image
      - build-vaultCli:
          context: docker-images
          filters:
            branches:
              only: main
      # Deploy Go Docker Builder
      # - build-goDockerBuilder:
      #     context: docker-images
      #     filters:
      #       branches:
      #         only: main
